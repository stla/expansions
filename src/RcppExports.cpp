// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/expansions.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// rcpp_intToAry
IntegerVector rcpp_intToAry(int n, IntegerVector s);
static SEXP expansions_rcpp_intToAry_try(SEXP nSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_intToAry(n, s));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP expansions_rcpp_intToAry(SEXP nSEXP, SEXP sSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(expansions_rcpp_intToAry_try(nSEXP, sSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int expansions_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("IntegerVector(*rcpp_intToAry)(int,IntegerVector)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP expansions_RcppExport_registerCCallable() { 
    R_RegisterCCallable("expansions", "expansions_rcpp_intToAry", (DL_FUNC)expansions_rcpp_intToAry_try);
    R_RegisterCCallable("expansions", "expansions_RcppExport_validate", (DL_FUNC)expansions_RcppExport_validate);
    return R_NilValue;
}
